/*
 * Copyright (c) 2019, Trevor <https://github.com/Trevor159>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.runelite.client.plugins.adventurelog;

import com.google.common.collect.ImmutableMap;
import java.util.Map;
import net.runelite.api.Item;
import net.runelite.api.ItemID;
import net.runelite.api.NPC;
import net.runelite.api.NpcID;

public enum Pets
{
	/**
	 * Boss pets
	 */
	ABYSSAL_ORPHAN(ItemID.ABYSSAL_ORPHAN, NpcID.ABYSSAL_ORPHAN_5884),
	BABY_MOLE(ItemID.BABY_MOLE, NpcID.BABY_MOLE_6635),
	CALLISTO_CUB(ItemID.CALLISTO_CUB, NpcID.CALLISTO_CUB_5558),
	HELLPUPPY(ItemID.HELLPUPPY, NpcID.HELLPUPPY_3099),
	KALPHITE_PRINCESS(ItemID.KALPHITE_PRINCESS, NpcID.KALPHITE_PRINCESS_6638),
	KALPHITE_PRINCESS_2(ItemID.KALPHITE_PRINCESS_12654, NpcID.KALPHITE_PRINCESS),
	CHAOS_ELEMENTAL(ItemID.PET_CHAOS_ELEMENTAL, NpcID.CHAOS_ELEMENTAL_JR),
	DAGANNOTH_PRIME(ItemID.PET_DAGANNOTH_PRIME, NpcID.DAGANNOTH_PRIME_JR_6629),
	DAGANNOTH_REX(ItemID.PET_DAGANNOTH_REX, NpcID.DAGANNOTH_REX_JR),
	DAGGANOTH_SUPREME(ItemID.PET_DAGANNOTH_SUPREME, NpcID.DAGANNOTH_SUPREME_JR_6628),
	DARK_CORE(ItemID.PET_DARK_CORE, NpcID.DARK_CORE),
	GENERAL_GRAARDOR(ItemID.PET_GENERAL_GRAARDOR, NpcID.GENERAL_GRAARDOR_JR),
	JAL_NIB_REK(ItemID.JALNIBREK, NpcID.JALNIBREK_7675),
	KRIL_TSUTSAROTH(ItemID.PET_KRIL_TSUTSAROTH, NpcID.KRIL_TSUTSAROTH_JR),
	KRAKEN(ItemID.PET_KRAKEN, NpcID.KRAKEN_6640),
	KREEARRA(ItemID.PET_KREEARRA, NpcID.KREEARRA_JR),
	MIDNIGHT(ItemID.MIDNIGHT, NpcID.MIDNIGHT_7893),
	NOON(ItemID.NOON, NpcID.NOON_7892),
	SMOKE_DEVIL(ItemID.PET_SMOKE_DEVIL, NpcID.SMOKE_DEVIL_6639),
	SNAKELING_GREEN(ItemID.PET_SNAKELING, NpcID.SNAKELING_2130),
	SNAKELING_RED(ItemID.PET_SNAKELING_12939, NpcID.SNAKELING_2131),
	SNAKELING_BLUE(ItemID.PET_SNAKELING_12940, NpcID.SNAKELING_2132),
	ZILYANA(ItemID.PET_ZILYANA, NpcID.ZILYANA_JR),
	PRINCE_BLACK_DRAGON(ItemID.PRINCE_BLACK_DRAGON, NpcID.PRINCE_BLACK_DRAGON),
	SCORPIAS_OFFSPRING(ItemID.SCORPIAS_OFFSPRING, NpcID.SCORPIAS_OFFSPRING_5561),
	TZREK_JAD(ItemID.TZREKJAD, NpcID.TZREKJAD_5893),
	VENENATIS_SPIDERLING(ItemID.VENENATIS_SPIDERLING, NpcID.VENENATIS_SPIDERLING_5557),
	VETION_JR_PURPLE(ItemID.VETION_JR, NpcID.VETION_JR_5559),
	VETION_JR_ORANGE(ItemID.VETION_JR_13180, NpcID.VETION_JR_5560),
	SRARACHA(ItemID.SRARACHA, NpcID.SRARACHA_2144),
	SKOTOS(ItemID.SKOTOS, NpcID.SKOTOS_7671),
	VORKI(ItemID.VORKI, NpcID.VORKI_8029),
	LIL_ZIK(ItemID.LIL_ZIK, NpcID.LIL_ZIK_8337),
	TZREK_ZUK(ItemID.TZREKZUK, NpcID.TZREKZUK_8011),
	CORPOREAL_CRITTER(ItemID.PET_CORPOREAL_CRITTER, NpcID.CORPOREAL_CRITTER_8010),
	IKKLE_HYDRA_GREEN(ItemID.IKKLE_HYDRA, NpcID.IKKLE_HYDRA),
	IKKLE_HYDRA_BLUE(ItemID.IKKLE_HYDRA_22748, NpcID.IKKLE_HYDRA_8493),
	IKKLE_HYDRA_RED(ItemID.IKKLE_HYDRA_22750, NpcID.IKKLE_HYDRA_8494),
	IKKLE_HYDRA_BLACK(ItemID.IKKLE_HYDRA_22752, NpcID.IKKLE_HYDRA_8495),

	/**
	 * Skilling pets
	 */
	BABY_CHINCHOMPA_GREY(ItemID.BABY_CHINCHOMPA_13324, NpcID.BABY_CHINCHOMPA_6757),
	BABY_CHINCHOMPA_RED(ItemID.BABY_CHINCHOMPA, NpcID.BABY_CHINCHOMPA_6756),
	BABY_CHINCHOMPA_BLACK(ItemID.BABY_CHINCHOMPA_13325, NpcID.BABY_CHINCHOMPA_6758),
	BABY_CHINCHOMPA_GOLD(ItemID.BABY_CHINCHOMPA_13326, NpcID.BABY_CHINCHOMPA_6759),
	BEAVER(ItemID.BEAVER, NpcID.BEAVER_6724),
	HERON(ItemID.HERON, NpcID.HERON_6722),
	ROCK_GOLEM(ItemID.ROCK_GOLEM, NpcID.ROCK_GOLEM_7451),
	GIANT_SQUIRREL(ItemID.GIANT_SQUIRREL, NpcID.GIANT_SQUIRREL_7351),
	TANGLEROOT(ItemID.TANGLEROOT, NpcID.TANGLEROOT_7352),
	ROCKY(ItemID.ROCKY, NpcID.ROCKY_7353),
	RIFT_GUARDIAN_FIRE(ItemID.RIFT_GUARDIAN, NpcID.RIFT_GUARDIAN_7354),
	RIFT_GUARDIAN_AIR(ItemID.RIFT_GUARDIAN_20667, NpcID.RIFT_GUARDIAN_7355),
	RIFT_GUARDIAN_MIND(ItemID.RIFT_GUARDIAN_20669, NpcID.RIFT_GUARDIAN_7356),
	RIFT_GUARDIAN_WATER(ItemID.RIFT_GUARDIAN_20671, NpcID.RIFT_GUARDIAN_7357),
	RIFT_GUARDIAN_EARTH(ItemID.RIFT_GUARDIAN_20673, NpcID.RIFT_GUARDIAN_7358),
	RIFT_GUARDIAN_BODY(ItemID.RIFT_GUARDIAN_20675, NpcID.RIFT_GUARDIAN_7359),
	RIFT_GUARDIAN_COSMIC(ItemID.RIFT_GUARDIAN_20677, NpcID.RIFT_GUARDIAN_7360),
	RIFT_GUARDIAN_CHAOS(ItemID.RIFT_GUARDIAN_20679, NpcID.RIFT_GUARDIAN_7361),
	RIFT_GUARDIAN_NATURE(ItemID.RIFT_GUARDIAN_20681, NpcID.RIFT_GUARDIAN_7362),
	RIFT_GUARDIAN_LAW(ItemID.RIFT_GUARDIAN_20683, NpcID.RIFT_GUARDIAN_7363),
	RIFT_GUARDIAN_DEATH(ItemID.RIFT_GUARDIAN_20685, NpcID.RIFT_GUARDIAN_7364),
	RIFT_GUARDIAN_SOUL(ItemID.RIFT_GUARDIAN_20687, NpcID.RIFT_GUARDIAN_7365),
	RIFT_GUARDIAN_ASTRAL(ItemID.RIFT_GUARDIAN_20689, NpcID.RIFT_GUARDIAN_7366),
	RIFT_GUARDIAN_BLOOD(ItemID.RIFT_GUARDIAN_20691, NpcID.RIFT_GUARDIAN_7367),
	HERBI(ItemID.HERBI, NpcID.HERBI_7760),

	/**
	 * Misc pets
	 */
	PENANCE_QUEEN(ItemID.PET_PENANCE_QUEEN, NpcID.PENANCE_PET_6674),
	BLOODHOUND(ItemID.BLOODHOUND, NpcID.BLOODHOUND_7232),
	CHOMPY_CHICK(ItemID.CHOMPY_CHICK, NpcID.CHOMPY_CHICK_4002),
	PHOENIX(ItemID.PHOENIX, NpcID.PHOENIX_7370),
	OLMLET(ItemID.OLMLET, NpcID.OLMLET_7520),
	YOUNGLLEF(ItemID.YOUNGLLEF, NpcID.YOUNGLLEF_8737),
	CORRUPTED_YOUNGLLEF(ItemID.CORRUPTED_YOUNGLLEF, NpcID.CORRUPTED_YOUNGLLEF_8738),
	SMOLCANO(ItemID.SMOLCANO, NpcID.SMOLCANO_8739);

	private final static Map<Integer, Pets> petsByNpcID;
	private final static Map<Integer, Pets> petsByItemID;

	private int npcID;
	private int itemID;

	Pets(int itemID, int npcID)
	{
		this.npcID = npcID;
		this.itemID = itemID;
	}

	static boolean isPet(NPC npc)
	{
		return petsByNpcID.containsKey(npc.getId());
	}

	static boolean isPet(Item item)
	{
		return petsByItemID.containsKey(item.getId());
	}

	static int getItemId(NPC npc)
	{
		return petsByNpcID.get(npc.getId()).itemID;
	}

	static
	{
		ImmutableMap.Builder<Integer, Pets> itemBuilder = new ImmutableMap.Builder<>();
		ImmutableMap.Builder<Integer, Pets> npcBuilder = new ImmutableMap.Builder<>();

		for (Pets pets : values())
		{
			itemBuilder.put(pets.itemID, pets);
			npcBuilder.put(pets.npcID, pets);
		}

		petsByItemID = itemBuilder.build();
		petsByNpcID = npcBuilder.build();
	}
}
